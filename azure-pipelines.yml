# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: ubuntu-latest

variables:
  - name: DEV_ENVIRONMENT
    value: delano

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
          # Publishing Terraform manifests
          - task: PublishPipelineArtifact@1
            displayName: Publish Terraform Artifacts
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              artifact: 'terraform-manifests-out'
              publishLocation: 'pipeline'
              
          # Publishing Kube-Manifests
          - task: PublishPipelineArtifact@1
            displayName: Publish Kube-Manifest Artifacts
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/kube-manifests'
              artifact: 'kube-manifests-out'
              publishLocation: 'pipeline'

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              backendServiceArm: 'capstone-svc-conn'
              backendAzureRmResourceGroupName: 'terraform-storage-rg'
              backendAzureRmStorageAccountName: 'terraformstatedelano'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'aks-terraform.tfstate'
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              allowTelemetryCollection: false

  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadSecureFile@1
                  displayName: Download SSH Key
                  name: sshkey
                  inputs:
                    secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
                - task: TerraformTaskV4@4
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    backendServiceArm: 'capstone-svc-conn'
                    backendAzureRmResourceGroupName: 'terraform-storage-rg'
                    backendAzureRmStorageAccountName: 'terraformstatedelano'
                    backendAzureRmContainerName: 'tfstatefiles'
                    backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                    allowTelemetryCollection: false
                - task: TerraformTaskV4@4
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceNameAzureRM: 'capstone-svc-conn'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false
                - task: TerraformTaskV4@4
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceNameAzureRM: 'capstone-svc-conn'
                    commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false
